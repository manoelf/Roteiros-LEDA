package adt.rbtree;

import adt.bst.BSTImpl;
import adt.bst.BSTNode;
import adt.bt.Util;
import adt.rbtree.RBNode.Colour;

public class RBTreeImpl<T extends Comparable<T>> extends BSTImpl<T>
		implements RBTree<T> {

	public RBTreeImpl() {
		this.root = new RBNode<T>();
	}

	protected int blackHeight() {
		return height((RBNode<T>) this.getRoot());
	}

	private int height(RBNode<T> node) {
		if (node.isEmpty()) {
			return 1;
		} else {
			int height = 0;
			if (node.getColour() == Colour.BLACK) {
				int right = height((RBNode<T>) node.getRight());
				int left = height((RBNode<T>) node.getLeft());
				if (right >= left) {
					height = right;
				} else {
					height = left;
				}
				
				return 1 + height;
			} else {
				return 0 + height;
			}
			
		}
	}
	
	protected boolean verifyProperties() {
		boolean resp = verifyNodesColour() && verifyNILNodeColour()
				&& verifyRootColour() && verifyChildrenOfRedNodes()
				&& verifyBlackHeight();

		return resp;
	}

	/**
	 * The colour of each node of a RB tree is black or red. This is guaranteed
	 * by the type Colour.
	 */
	private boolean verifyNodesColour() {
		return true; // already implemented
	}

	/**
	 * The colour of the root must be black.
	 */
	private boolean verifyRootColour() {
		return ((RBNode<T>) root).getColour() == Colour.BLACK; // already
																// implemented
	}

	/**
	 * This is guaranteed by the constructor.
	 */
	private boolean verifyNILNodeColour() {
		return true; // already implemented
	}

	/**
	 * Verifies the property for all RED nodes: the children of a red node must
	 * be BLACK.
	 */
	private boolean verifyChildrenOfRedNodes() {
		// TODO Implement your code here
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	/**
	 * Verifies the black-height property from the root. The method blackHeight
	 * returns an exception if the black heights are different.
	 */
	private boolean verifyBlackHeight() {
		// TODO Implement your code here
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public void insert(T value) {
		RBNode<T> node = this.insert(value, (RBNode<T>) this.getRoot());
		node.setColour(Colour.RED);
		fixUpCase1(node);
	}
	
	protected RBNode<T> insert(T element, RBNode<T> node) {
		if (node.isEmpty()) {
			node.setData(element);
			
			node.setLeft(new RBNode<T>());
			node.getLeft().setParent(node);
			
			node.setRight(new RBNode<T>());
			node.getRight().setParent(node);
		} else {
			if (element.compareTo(node.getData()) != 0) {
				if (element.compareTo(node.getData()) < 0) {
					node = insert(element, (RBNode<T>) node.getLeft());
				} else {
					node = insert(element, (RBNode<T>) node.getRight());
				}
			}
		}
		return node;
	}

	@Override
	public RBNode<T>[] rbPreOrder() {
		// TODO Implement your code here
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	// FIXUP methods
	protected void fixUpCase1(RBNode<T> node) {
		if (node.getParent() == null) {
			node.setColour(Colour.BLACK);
		} else {
			fixUpCase2(node);
		}
	}

	protected void fixUpCase2(RBNode<T> node) {
		if (((RBNode<T>) node.getParent()).getColour() == Colour.RED) {
			fixUpCase3(node);
		}
	}

	protected void fixUpCase3(RBNode<T> node) {
		if (((RBNode<T>) node.getParent().getParent().getRight()).getColour() == Colour.RED) {
			((RBNode<T>) node.getParent()).setColour(Colour.BLACK);
			((RBNode<T>) node.getParent().getParent().getRight()).setColour(Colour.BLACK);
			((RBNode<T>) node.getParent().getParent()).setColour(Colour.RED);
			fixUpCase1((RBNode<T>) node.getParent().getParent());
		} else {
			fixUpCase4(node);
		}
		System.out.println("C");
	}

	protected void fixUpCase4(RBNode<T> node) {
		RBNode<T> euMesmo = node;
		
		if (node.equals(node.getParent().getRight()) && node.getParent().equals(node.getParent().getParent().getLeft())) {
			Util.leftRotation((BSTNode<T>) node.getParent());
			euMesmo = (RBNode<T>) node.getLeft();
		} else if (node.equals(node.getParent().getLeft()) && node.getParent().equals(node.getParent().getParent().getRight())) {
			Util.rightRotation((BSTNode<T>) node.getParent());
			euMesmo = (RBNode<T>) node.getRight();
		}
		System.out.println("C");
		fixUpCase5(euMesmo);
	}

	protected void fixUpCase5(RBNode<T> node) {
		System.out.println("C");
		((RBNode<T>) node.getParent()).setColour(Colour.BLACK);
		((RBNode<T>) node.getParent().getParent()).setColour(Colour.RED);
		
		if (node.equals(node.getParent().getRight())) {
			Util.leftRotation((BSTNode<T>) node.getParent().getParent());
		} else if (node.equals(node.getParent().getLeft())) {
			Util.rightRotation((BSTNode<T>) node.getParent().getParent());
		}
		
		this.root = (BSTNode<T>) node.getParent();		
	}
	
	public static void main(String[] args) {
		RBTreeImpl<Integer> a = new RBTreeImpl<>();
		a.insert(9);
		a.insert(5);
		a.insert(11);
		a.insert(4);
		a.root.printTree();
		System.out.println(((RBNode<Integer>) a.root.getLeft()).getColour());
	}
}
