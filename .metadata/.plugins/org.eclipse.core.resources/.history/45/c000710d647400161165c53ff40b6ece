package adt.linkedList;

@SuppressWarnings("unchecked")
public class DoubleLinkedListImpl<T> extends SingleLinkedListImpl<T> implements
		DoubleLinkedList<T> {

	protected DoubleLinkedListNode<T> last;
	
	@Override
	public void insert(T element) {
		
		DoubleLinkedListNode<T> node = new DoubleLinkedListNode<T>();
		
		if (element != null) {
			if (isEmpty()) {
				DoubleLinkedListNode<T> newNode = new DoubleLinkedListNode<T>(element, node, null);
				super.head = newNode;
				this.last = newNode;
			} else {
				DoubleLinkedListNode<T> newNode = new DoubleLinkedListNode<T>(element, node, this.last);
				this.last.next = newNode;
				this.last = newNode;
			}
			super.size += 1;
		}
	}
	
	@Override
	public void insertFirst(T element) {
		if (element != null) {
			if (!isEmpty()) {
				DoubleLinkedListNode<T> newNode = new DoubleLinkedListNode<T>(element, (DoubleLinkedListNode<T>) this.head, null);
				super.head = newNode;
			} else {
				this.insert(element);
			}
			super.size += 1;
		}		
	}

	@Override
	public void removeFirst() {
		if (!isEmpty()) {
			head = head.next;
			((DoubleLinkedListNode<T>) head).previous = null;
			size -= 1;
		}
	}

	@Override
	public void removeLast() {
		if (!isEmpty()) {
			if (size == 1) {
				last.setData(null);
				last.next = new DoubleLinkedListNode<>();
			} else {
				last = last.previous;
			last.next = new DoubleLinkedListNode<>();
			}
			size -= 1;
		}
	}

	public DoubleLinkedListNode<T> getLast() {
		return last;
	}

	public void setLast(DoubleLinkedListNode<T> last) {
		this.last = last;
	}

	@Override
	public T[] toArray(){
		T[] array = (T[]) new Object[super.size()];
		
		if (!isEmpty()) {
			DoubleLinkedListNode<T> tmp = (DoubleLinkedListNode<T>) super.head;
			int indice = 0;
			while(!tmp.isNIL() & indice < super.size()) {
				array[indice++] = tmp.getData();
				tmp = (DoubleLinkedListNode<T>) tmp.getNext();
			}
		}	
		return array;
	}
	
	
	public DoubleLinkedListNode<T> getHead() {
		return (DoubleLinkedListNode<T>) head;
	}
	
	public static void main(String[] args) {
		DoubleLinkedListImpl<Integer> a = new DoubleLinkedListImpl<>();
		a.insert(1);
		a.insert(2);
		a.removeLast();
		a.removeLast();
		System.out.println(((DoubleLinkedListNode<Integer>) a.getHead()));
	}
}